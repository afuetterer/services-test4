[project]
name = "services-test4"
version = "0.1.1"
description = "This repository is used to test services and configurations. Nothing to see here."
readme = "README.md"
keywords = [
  "services",
  "test",
]
license = "MIT"
authors = [
  { name = "Heinz-Alexander Fuetterer", email = "fuetterh@posteo.de" },
]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 1 - Planning",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Typing :: Typed",
]
dependencies = [
  "httpx>=0.24.1",
]
[project.optional-dependencies]
cli = [
  "typer[all]>=0.9",
]
[project.urls]
Documentation = "https://github.com/afuetterer/services-test4#readme"
Issues = "https://github.com/afuetterer/services-test4/issues"
Source = "https://github.com/afuetterer/services-test4"
[project.scripts]
services-test4 = "services_test4.__main__:app"

[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling",
]

[tool.hatch.build.targets.wheel]
packages = ["src/services_test4"]

# hatch
# https://hatch.pypa.io/latest/config/metadata/
# ------------------------------------------------------------------------------

[tool.hatch.envs.default]
dependencies = [
  "services-test4[cli]",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "pytest-randomly",
  "pytest-xdist",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov {args:tests}"
# cov-report = [
#   "- coverage combine",
#   "coverage report",
# ]
cov = [
  "test-cov",
  # "cov-report",
]
ci = [
  "pytest --cov --numprocesses=auto --dist=loadscope",
]

[tool.hatch.envs.lint]
extra-dependencies = [
  "pre-commit",
  "mypy",
]
[tool.hatch.envs.lint.scripts]
style = "pre-commit run --all-files --color=always"
typing = "mypy src tests"
all = [
  "style",
  "typing",
]

[tool.hatch.envs.docs]
detached = true
dependencies = [
  "mkdocs>=1.4",
  "mkdocstrings[python]>=0.20",
  "mkdocs-click>=0.8",
  "mkdocs-include-markdown-plugin>=5.1",
  "mkdocs-gen-files>=0.5",
  "mkdocs-literate-nav>=0.6",
  "mkdocs-material>=9.1",
  "mkdocs-section-index>=0.3",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --verbose"
serve = "mkdocs serve --verbose"
deploy = "mkdocs gh-deploy --force --verbose"

# [tool.hatch.envs.release]
# detached = true
# dependencies = [
#   "python-semantic-release>=8.0",
# ]
# [tool.hatch.envs.release.scripts]
# version = "semantic-release -vv version"

# black
# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
# ------------------------------------------------------------------------------

[tool.black]
target_version = ["py38", "py39", "py310", "py311"]
line-length = 120
skip-string-normalization = true

# ruff
# https://beta.ruff.rs/docs/configuration/
# ------------------------------------------------------------------------------

[tool.ruff]
target-version = "py38"
line-length = 120
select = ["B", "E", "F", "I", "S", "TCH", "UP"]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["services_test4"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

# pytest
# https://docs.pytest.org/en/stable/customize.html
# ------------------------------------------------------------------------------

[tool.pytest.ini_options]
testpaths = "tests"

# coverage.py
# https://coverage.readthedocs.io/en/latest/config.html
# ------------------------------------------------------------------------------

[tool.coverage.run]
source_pkgs = ["services_test4", "tests"]
branch = true
parallel = true
omit = [
  "src/services_test4/__main__.py",
]

[tool.coverage.paths]
services_test4 = ["src/services_test4", "*/services-test4/src/services_test4"]
tests = ["tests", "*/services-test4/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if TYPE_CHECKING:",
]
skip_empty = true

# mypy
# https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
# ------------------------------------------------------------------------------

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

# licensecheck
# https://github.com/FHPythonUtils/LicenseCheck/#example-1-pyprojecttoml
# ------------------------------------------------------------------------------

[tool.licensecheck]
using = "PEP631"
format = "ansi"

# python-semantic-release
# https://python-semantic-release.readthedocs.io/en/latest/configuration.html#settings
# ------------------------------------------------------------------------------

[tool.semantic_release]
# build_command = "hatch build"
commit_message = "chore: release {version}\n\n[skip ci]"
logging_use_named_masks = true
major_on_zero = false
tag_format = "{version}"
version_toml = ["pyproject.toml:project.version"]

[tool.semantic_release.changelog]
# template_dir = ".github/templates"
exclude_commit_patterns = [
  "^build",
  "^chore",
  "^ci",
  "^docs",
  "^style",
]

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
